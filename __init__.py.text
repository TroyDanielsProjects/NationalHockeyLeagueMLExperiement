import os
from flask import Flask, request, render_template, g, redirect, Response, abort
from sqlalchemy import *
from sqlalchemy.pool import NullPool
import index, player, coach, game, season, stats, team

"""
I combined the code from the flask tutorial specifed and the code given. This allows the use of blueprints which
makes development better oganized, more readable, easier and faster. Please note that this changes how to run to application
in the terminal for apps main folder run: "flask --app flaskr run --debug"
"""
def create_app(test_config=None):
    tmpl_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'templates')
    app = Flask(__name__, instance_relative_config = True,template_folder=tmpl_dir)

    DATABASEURI = "postgresql://td2847:SaltyPineapple52@104.196.222.236/proj1part2"
    engine = create_engine(DATABASEURI)

    @app.before_request
    def before_request():
        """
        This function is run at the beginning of every web request
        (every time you enter an address in the web browser).
        We use it to setup a database connection that can be used throughout the request.

        The variable g is globally accessible.
        """
        try:
            g.conn = engine.connect()
        except:
            print("uh oh, problem connecting to database")
            import traceback; traceback.print_exc()
            g.conn = None

    @app.teardown_request
    def teardown_request(exception):
        """
        At the end of the web request, this makes sure to close the database connection.
        If you don't, the database could run out of memory!
        """
        try:
            g.conn.close()
        except Exception as e:
            pass

    app.register_blueprint(index.bp)
    app.register_blueprint(player.bp)
    app.register_blueprint(coach.bp)
    app.register_blueprint(game.bp)
    app.register_blueprint(season.bp)
    app.register_blueprint(team.bp)
    app.register_blueprint(stats.bp)

    
    return app

